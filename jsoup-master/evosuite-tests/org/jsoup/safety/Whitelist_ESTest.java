/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:53:31 GMT 2024
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Whitelist_ESTest extends Whitelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Whitelist.AttributeKey whitelist_AttributeKey0 = Whitelist.AttributeKey.valueOf("align");
      Whitelist.Protocol whitelist_Protocol0 = new Whitelist.Protocol("align");
      boolean boolean0 = whitelist_AttributeKey0.equals(whitelist_Protocol0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Whitelist.AttributeValue whitelist_AttributeValue0 = new Whitelist.AttributeValue("cite");
      boolean boolean0 = whitelist_AttributeValue0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Attributes attributes0 = whitelist0.getEnforcedAttributes("");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("]lpWx~r%z>#eq-", "div", "cite");
      Attribute attribute0 = new Attribute("div", "org.jsoup.safety.Whitelist$TypedValue");
      boolean boolean0 = whitelist0.isSafeAttribute("]lpWx~r%z>#eq-", (Element) null, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Document document0 = Document.createShell("a");
      whitelist0.preserveRelativeLinks(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      Whitelist whitelist1 = whitelist0.addAttributes("a", stringArray0);
      whitelist1.addProtocols("a", "a", stringArray0);
      Attribute attribute0 = new Attribute("a", "a");
      boolean boolean0 = whitelist0.isSafeAttribute("a", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Document document0 = Document.createShell("a");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      Whitelist whitelist1 = whitelist0.addAttributes("a", stringArray0);
      whitelist1.addProtocols("a", "a", stringArray0);
      Attribute attribute0 = new Attribute("a", "a");
      // Undeclared exception!
      try { 
        whitelist0.isSafeAttribute("a", document0, attribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Document document0 = Document.createShell("a");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "a";
      whitelist0.addAttributes("a", stringArray0);
      Attribute attribute0 = new Attribute("a", "a");
      boolean boolean0 = whitelist0.isSafeAttribute("a", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[2] = "h2";
      stringArray0[3] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[4] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[5] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[6] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[7] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[8] = "org.jsoup.safety.Whitelist$TagName";
      whitelist0.addAttributes("org.jsoup.safety.Whitelist$TagName", stringArray0);
      Document document0 = Document.createShell("org.jsoup.safety.Whitelist$TagName");
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.safety.Whitelist$TagName", "?/");
      boolean boolean0 = whitelist0.isSafeAttribute("org.jsoup.safety.Whitelist$TagName", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")L7${G-:8MA-a6T^s";
      stringArray0[1] = ")L7${G-:8MA-a6T^s";
      stringArray0[2] = ")L7${G-:8MA-a6T^s";
      stringArray0[3] = ")L7${G-:8MA-a6T^s";
      Whitelist whitelist1 = whitelist0.addAttributes(")L7${G-:8MA-a6T^s", stringArray0);
      boolean boolean0 = whitelist1.isSafeTag(")L7${G-:8MA-a6T^s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      boolean boolean0 = whitelist0.isSafeTag("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Unknown combinator: ";
      stringArray1[1] = "XxKH!2414y*'C9{I";
      stringArray1[2] = "XxKH!2414y*'C9{I";
      stringArray1[3] = "XxKH!2414y*'C9{I";
      stringArray1[4] = "XxKH!2414y*'C9{I";
      stringArray1[5] = "I\"k";
      stringArray1[6] = "XxKH!2414y*'C9{I";
      stringArray1[7] = "           ";
      stringArray1[8] = "XxKH!2414y*'C9{I";
      Whitelist whitelist1 = whitelist0.addProtocols("XxKH!2414y*'C9{I", "XxKH!2414y*'C9{I", stringArray1);
      Whitelist whitelist2 = whitelist0.removeProtocols("XxKH!2414y*'C9{I", "XxKH!2414y*'C9{I", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addProtocols("XxKH!2414Vy*'C9{I", "XxKH!2414Vy*'C9{I", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.removeProtocols("XxKH!2414Vy*'C9{I", "colgroup", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":all";
      whitelist0.addProtocols(":all", ":all", stringArray0);
      Whitelist whitelist1 = whitelist0.removeProtocols(":all", ":all", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        whitelist0.removeProtocols("T{j!(<G_lLLG0LWmT", "V_p?oQHFA", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Unknown combinator: ";
      stringArray1[1] = "XxKH!2414y*'C9{I";
      stringArray1[2] = "XxKH!2414y*'C9{I";
      stringArray1[3] = "XxKH!2414y*'C9{I";
      stringArray1[4] = "XxKH!2414y*'C9{I";
      stringArray1[5] = "I\"k";
      stringArray1[6] = "XxKH!2414y*'C9{I";
      stringArray1[7] = "           ";
      stringArray1[8] = "XxKH!2414y*'C9{I";
      whitelist0.addProtocols("XxKH!2414y*'C9{I", "XxKH!2414y*'C9{I", stringArray1);
      Whitelist whitelist1 = whitelist0.addProtocols("XxKH!2414y*'C9{I", "XxKH!2414y*'C9{I", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[0];
      Whitelist whitelist1 = whitelist0.addProtocols("XxKH!2414Vy*'C9{I", "tr", stringArray0);
      Whitelist whitelist2 = whitelist0.addProtocols("XxKH!2414Vy*'C9{I", "XxKH!2414Vy*'C9{I", stringArray0);
      Whitelist whitelist3 = whitelist2.removeProtocols("XxKH!2414Vy*'C9{I", "XxKH!2414Vy*'C9{I", stringArray0);
      assertSame(whitelist3, whitelist1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.addEnforcedAttribute("strong", "strong", "strong");
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("strong", "strong");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      whitelist0.addEnforcedAttribute("org.jsoup.safety.Whitelist$TagName", "org.jsoup.safety.Whitelist$TagName", "?/");
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("org.jsoup.safety.Whitelist$TagName", "?/");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[2] = "h2";
      stringArray0[3] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[4] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[5] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[6] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[7] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[8] = "org.jsoup.safety.Whitelist$TagName";
      Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.safety.Whitelist$TagName", stringArray0);
      Whitelist whitelist2 = whitelist1.removeEnforcedAttribute("org.jsoup.safety.Whitelist$TagName", "?/");
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Whitelist whitelist1 = whitelist0.removeEnforcedAttribute("org.jsoup.safety.Whitelist$TagName", "^R\"9bN'4*8/2m{3|:w)");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("V_p?oQHFA", "V_p?oQHFA", "V_p?oQHFA");
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("V_p?oQHFA", "V_p?oQHFA", "V_p?oQHFA");
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":all";
      Whitelist whitelist0 = Whitelist.relaxed();
      Whitelist whitelist1 = whitelist0.addAttributes("UwlQcQM$A|", stringArray0);
      // Undeclared exception!
      try { 
        whitelist1.removeAttributes(":all", stringArray0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":all";
      Whitelist whitelist1 = whitelist0.removeAttributes(":all", stringArray0);
      assertSame(whitelist0, whitelist1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "sub";
      stringArray0[1] = "sub";
      stringArray0[2] = "sub";
      Whitelist whitelist1 = whitelist0.addAttributes("sub", stringArray0);
      Whitelist whitelist2 = whitelist0.removeAttributes("sub", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.removeAttributes("~BIih9FHBK", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[1] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[2] = "h2";
      stringArray0[3] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[4] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[5] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[6] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[7] = "org.jsoup.safety.Whitelist$TagName";
      stringArray0[8] = "org.jsoup.safety.Whitelist$TagName";
      Whitelist whitelist1 = whitelist0.addAttributes("org.jsoup.safety.Whitelist$TagName", stringArray0);
      Whitelist whitelist2 = whitelist1.removeTags(stringArray0);
      assertSame(whitelist1, whitelist2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "nyuR\"iOz(P";
      stringArray0[1] = "nyuR\"iOz(P";
      stringArray0[2] = "nyuR\"iOz(P";
      stringArray0[3] = "nyuR\"iOz(P";
      stringArray0[4] = "nyuR\"iOz(P";
      Whitelist whitelist1 = whitelist0.addEnforcedAttribute("nyuR\"iOz(P", "nyuR\"iOz(P", "nyuR\"iOz(P");
      Whitelist whitelist2 = whitelist1.removeAttributes("nyuR\"iOz(P", stringArray0);
      assertSame(whitelist2, whitelist1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "'a;e0>~AZ0c@";
      stringArray0[1] = "a";
      stringArray0[2] = "img";
      Whitelist whitelist1 = whitelist0.removeAttributes("a", stringArray0);
      assertSame(whitelist1, whitelist0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Document document0 = Document.createShell("a");
      Attribute attribute0 = new Attribute("b", "b");
      boolean boolean0 = whitelist0.isSafeAttribute("a", document0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        whitelist0.addAttributes("h2", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
