/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:51:38 GMT 2024
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("iv<RcN'|%>E{k[%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.simpleText();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("F|<#s`1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("@I?FLzEu`r@X");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("$<?7y~?ec!.$Yg-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("#Ggqm80d* CO*SryL&q");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      boolean boolean0 = cleaner0.isValid(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("#Ggqm80d* CO*SryL&q");
      boolean boolean0 = cleaner0.isValid(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("");
      Document document1 = cleaner0.clean(document0);
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell("#Ggqm80d* CO*SryL&q");
      Document document1 = cleaner0.clean(document0);
      assertNotSame(document1, document0);
  }
}
