/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:44:02 GMT 2024
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CombiningEvaluator_ESTest extends CombiningEvaluator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      evaluatorArray0[0] = (Evaluator) evaluator_IsEmpty0;
      Element element0 = new Element("gB@h.+xnT{");
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      boolean boolean0 = combiningEvaluator_Or0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[0];
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or(evaluatorArray0);
      Pattern pattern0 = Pattern.compile("org.jsoup.select.CombiningEvaluator$And", 0);
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("org.jsoup.select.CombiningEvaluator$And", pattern0);
      combiningEvaluator_Or0.add(evaluator_AttributeWithValueMatching0);
      Document document0 = Document.createShell("ismap");
      boolean boolean0 = combiningEvaluator_Or0.matches(document0, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      Pattern pattern0 = Pattern.compile(", ", 0);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      linkedList0.add((Evaluator) evaluator_Matches0);
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      Document document0 = Document.createShell("VY^$1,i99{bv$aw@");
      boolean boolean0 = document0.is((Evaluator) combiningEvaluator_And0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      evaluatorArray0[0] = (Evaluator) evaluator_IsEmpty0;
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Element element0 = new Element("gB@h.+xnT{");
      boolean boolean0 = combiningEvaluator_And0.matches(element0, element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      Evaluator evaluator0 = combiningEvaluator_And0.rightMostEvaluator();
      assertNull(evaluator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      Evaluator evaluator0 = combiningEvaluator_And0.rightMostEvaluator();
      assertNull(evaluator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      // Undeclared exception!
      try { 
        combiningEvaluator_And0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      String string0 = combiningEvaluator_Or0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Evaluator[] evaluatorArray0 = new Evaluator[1];
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(evaluatorArray0);
      combiningEvaluator_And0.replaceRightMostEvaluator(evaluator_IsEmpty0);
      assertEquals(":empty", evaluator_IsEmpty0.toString());
  }
}
