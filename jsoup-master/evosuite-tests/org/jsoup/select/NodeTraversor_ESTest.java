/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:44:48 GMT 2024
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NodeTraversor_ESTest extends NodeTraversor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      CDataNode cDataNode0 = new CDataNode("multiple");
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeTraversor.filter(nodeFilter0, (Node) cDataNode0);
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult2).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeTraversor.filter(nodeFilter1, (Node) cDataNode0);
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult3);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult1, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null, (NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = new Document("org.jsoup.select.NodeTraversor");
      Document document1 = document0.normalise();
      document0.getElementsByIndexEquals(512);
      Elements elements0 = document1.getElementsContainingOwnText("");
      NodeTraversor.filter(nodeFilter0, elements0);
      NodeVisitor nodeVisitor1 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult1).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = new Document("US-ASCII");
      Document document1 = document0.normalise();
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeTraversor.filter(nodeFilter0, (Node) document1);
      assertEquals(0, document1.childNodeSize());
      assertEquals(NodeFilter.FilterResult.REMOVE, nodeFilter_FilterResult2);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.REMOVE;
      NodeFilter.FilterResult nodeFilter_FilterResult2 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, nodeFilter_FilterResult0, nodeFilter_FilterResult1, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn(nodeFilter_FilterResult2).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = new Document("US-ASCII");
      Document document1 = document0.normalise();
      NodeFilter.FilterResult nodeFilter_FilterResult3 = NodeTraversor.filter(nodeFilter0, (Node) document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(NodeFilter.FilterResult.STOP, nodeFilter_FilterResult3);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = new Document("US-ASCII");
      Document document1 = document0.normalise();
      Document document2 = document1.ownerDocument();
      NodeTraversor.filter(nodeFilter0, (Node) document2);
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements0 = document0.getElementsContainingOwnText("US-ASCII");
      NodeTraversor.filter(nodeFilter1, elements0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = document2.ownerDocument();
      Elements elements1 = document3.getElementsContainingOwnText("US-ASCII");
      NodeTraversor.traverse(nodeVisitor0, elements1);
      NodeFilter nodeFilter2 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter2).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document4 = new Document("<");
      NodeTraversor.filter(nodeFilter2, (Node) document4);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document0 = new Document("*.LD2r)b~WlUGuG}FSH");
      Elements elements0 = document0.getElementsByIndexGreaterThan(3307);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Pl!ky?So;7Gt&f", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "_/#[Lru*K8(7G'zOg1'", (Attributes) null);
      elements0.add((Element) formElement0);
      NodeTraversor.filter(nodeFilter0, elements0);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeTraversor.filter(nodeFilter0, (Node) null);
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = new Document("*.LD2r)b~WlUGuG}FSH");
      Elements elements0 = document0.getElementsByIndexGreaterThan(3307);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Pl!ky?So;7Gt&f", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "_/#[Lru*K8(7G'zOg1'", (Attributes) null);
      elements0.add((Element) formElement0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor0, elements0);
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Element element0 = new Element("multiple");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      nodeTraversor0.traverse((Node) element0);
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor nodeTraversor0 = new NodeTraversor(nodeVisitor0);
      nodeTraversor0.traverse((Node) null);
  }
}
