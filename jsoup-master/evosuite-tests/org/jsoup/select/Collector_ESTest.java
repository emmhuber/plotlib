/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:39:21 GMT 2024
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Collector;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Collector_ESTest extends Collector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Evaluator> linkedList0 = new LinkedList<Evaluator>();
      CombiningEvaluator.And combiningEvaluator_And0 = new CombiningEvaluator.And(linkedList0);
      Document document0 = new Document("org.jsoup.select.Collector$Accumulator");
      Element element0 = Collector.findFirst(combiningEvaluator_And0, document0);
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("org.jsoup.helper.Validate");
      Document document0 = Document.createShell("");
      Element element0 = document0.text("");
      Element element1 = Collector.findFirst(evaluator_Attribute0, element0);
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = new Document("rl&0Xi2tnc<%/P1)V/");
      Document document1 = document0.normalise();
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute("org.jsoup.helper.Validate");
      Document document0 = Document.createShell("");
      document0.text("");
      StructuralEvaluator.ImmediatePreviousSibling structuralEvaluator_ImmediatePreviousSibling0 = new StructuralEvaluator.ImmediatePreviousSibling(evaluator_Attribute0);
      Elements elements0 = Collector.collect(structuralEvaluator_ImmediatePreviousSibling0, document0);
      assertEquals(0, elements0.size());
  }
}
