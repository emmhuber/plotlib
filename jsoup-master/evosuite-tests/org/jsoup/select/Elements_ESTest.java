/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:41:11 GMT 2024
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "h>Z] i$", attributes0);
      Elements elements0 = formElement0.getElementsByAttributeValueNot("\n", "org.jsoup.nodes.Document$OutputSettings");
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.contains(formElement0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{]G!E2S>1+3", parseSettings0);
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByAttributeValueNot("IJ1Fv-#", "Ch=B*B>w^# \"");
      List<FormElement> list0 = elements0.forms();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("_a*#{y)Zm!2KTW5");
      Elements elements0 = document0.getElementsByAttributeValueEnding("_a*#{y)Zm!2KTW5", "_a*#{y)Zm!2KTW5");
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("D<r*-tJ3'7nK");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.last();
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("(O2^", "radio");
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Document.createShell("qcZOj");
      document0.prependElement("qcZOj");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("qcZOj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Document.createShell("qcZOj");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.is("qcZOj");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.eq(1);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.eq(0);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = Document.createShell("Xcv2wJz-u^RHu8C");
      Elements elements0 = document0.getElementsByAttributeValueNot("Xcv2wJz-u^RHu8C", "org.jsoup.select.Elements");
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.remove();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      elements0.empty();
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("", 1);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("_a*#{y)Zm!2KTW5");
      Elements elements0 = document0.getElementsByAttributeValueEnding("_a*#{y)Zm!2KTW5", "_a*#{y)Zm!2KTW5");
      Elements elements1 = elements0.unwrap();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.wrap("\n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Document.createShell("_a*#{y)Zm!2KTW5");
      Elements elements0 = document0.getElementsByAttributeValueEnding("_a*#{y)Zm!2KTW5", "_a*#{y)Zm!2KTW5");
      Elements elements1 = elements0.wrap("_a*#{y)Zm!2KTW5");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("KR>/sYGn^-_?");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.before("KR>/sYGn^-_?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("_a*#{y)Zm!2KTW5");
      Elements elements0 = document0.getElementsByAttributeValueEnding("_a*#{y)Zm!2KTW5", "_a*#{y)Zm!2KTW5");
      Elements elements1 = elements0.before("_a*#{y)Zm!2KTW5");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = new Element("%]UWDau*5O><G");
      Elements elements0 = element0.getElementsByIndexLessThan(2961);
      elements0.add(element0);
      elements0.html("#q)p|5c\"k%<");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingText("");
      elements0.tagName("/52#60A$/MQd[?/");
      assertEquals("/52#60A$/MQd[?/", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Document.createShell("qv5u1Rr>O:0pW8Nqt");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(2);
      String string0 = elements0.html();
      assertEquals("<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("W+h6/hzUn");
      Elements elements0 = document0.children();
      Elements elements1 = elements0.prepend("W+h6/hzUn");
      List<String> list0 = elements1.eachText();
      assertTrue(list0.contains("W+h6/hzUn"));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{]G!E2S>1+3", parseSettings0);
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByAttributeValueNot("IJ1Fv-#", "Ch=B*B>w^# \"");
      List<String> list0 = elements0.eachText();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.parser.ParseSettings", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.append("del");
      boolean boolean0 = elements1.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{]G!E2S>1+3", parseSettings0);
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByAttributeValueNot("IJ1Fv-#", "Ch=B*B>w^# \"");
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.after("r,\"P_hOjl");
      String string0 = elements1.text();
      assertEquals(2, document0.childNodeSize());
      assertEquals("r,\"P_hOjl ", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("orgQsoupselect.Elements");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByIndexLessThan(70);
      Elements elements1 = elements0.val("orgQsoupselect.Elements");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{]G!E2S>1+3", parseSettings0);
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByAttributeValueNot("IJ1Fv-#", "Ch=B*B>w^# \"");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Document.createShell("area");
      Elements elements0 = document0.parents();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Document.createShell("qcZOj");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("$U3(9{@78w6>\".tC}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Document.createShell("qv5u1Rr>O:0pW8Nqt");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.toggleClass("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.removeClass("org.jsoup.select.Elements");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{]G!E2S>1+3", parseSettings0);
      Element element0 = new Element(tag0, "");
      Elements elements0 = element0.getElementsByAttributeValueNot("IJ1Fv-#", "Ch=B*B>w^# \"");
      Elements elements1 = elements0.addClass("Ch=B*B>w^# \"");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("qv5u1Rr>O:0pW8Nqt");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      Elements elements1 = elements0.removeAttr("qv5u1Rr>O:0pW8Nqt");
      assertEquals(3, elements1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("x;VT@X7li?P3-bx[J{", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("x;VT@X7li?P3-bx[J{", "x;VT@X7li?P3-bx[J{");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "x;VT@X7li?P3-bx[J{", attributes1);
      Elements elements0 = pseudoTextElement0.getElementsByAttribute("x;VT@X7li?P3-bx[J{");
      List<String> list0 = elements0.eachAttr("x;VT@X7li?P3-bx[J{");
      assertTrue(list0.contains("x;VT@X7li?P3-bx[J{"));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("qcZOj");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachAttr("$U3(9{@78w6>\".tC}");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Document.createShell("qcZOj");
      Elements elements0 = document0.getAllElements();
      document0.attr("qcZOj", true);
      boolean boolean0 = elements0.hasAttr("qcZOj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("qcZOj");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = new Document("orgQsoupselect.Elements");
      Document document1 = document0.normalise();
      Elements elements0 = document1.getElementsByIndexLessThan(70);
      Elements elements1 = elements0.attr("", "`aH\"\"r`F@u#LXN. r");
      String string0 = elements1.attr("");
      assertEquals("`aH\"\"r`F@u#LXN. r", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Document.createShell("qv5u1Rr>O:0pW8Nqt");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      String string0 = elements0.attr("org.jsoup.select.Evaluator$AttributeStarting");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsContainingOwnText("");
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.next();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValue("(O2^", "radio");
      Elements elements1 = elements0.prev("radio");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("orgQsoupselect.Elements");
      Elements elements0 = document0.getElementsByIndexLessThan(70);
      Elements elements1 = elements0.not("orgQsoupselect.Elements");
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.nextAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.select("X");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Elements elements0 = new Elements();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.filter(nodeFilter0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      // Undeclared exception!
      try { 
        elements0.prevAll("6:p$=,WK)(9O,u(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6:p$=,WK)(9O,u(': unexpected token at ':p$=,WK)(9O,u('
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = new Document("radio");
      Elements elements0 = document0.getElementsByAttribute("Y._");
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Elements elements0 = new Elements(0);
      // Undeclared exception!
      try { 
        elements0.next("\"2\" hh ,E\"6uS");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\"2\" hh ,E\"6uS': unexpected token at '\"2\" hh ,E\"6uS'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.prevAll();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Document.createShell("Buk<lbih9I|@}w^p:XY");
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      Elements elements1 = elements0.nextAll("encoding");
      assertEquals(0, elements1.size());
  }
}
