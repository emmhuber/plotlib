/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 22:27:34 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Entities_ESTest extends Entities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities.CoreCharset.byName("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.forName("US-ASCII");
      document_OutputSettings0.charset(charset0);
      String string0 = Entities.escape("", document_OutputSettings0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings1.prepareEncoder();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      String string0 = Entities.escape("&#xa0;", document_OutputSettings1);
      assertEquals("&amp;#xa0;", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings0.encoder();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      String string0 = Entities.escape("W Z(?^mV';Ju/%4s-", document_OutputSettings1);
      assertEquals("W Z(?^mV';Ju/%4s-", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(36);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Entities.escape((Appendable) bufferedWriter0, "UTF-yYmKsNqu\"CK(Kp5p", document_OutputSettings0, true, true, false);
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Entities.escape(" Wmfu->._6");
      assertEquals(" Wmfu-&gt;._6", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(36);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Entities.escape((Appendable) bufferedWriter0, "M<", document_OutputSettings1, true, true, false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Entities.escape("yYmKsNqu\"CK(Kp5p");
      assertEquals("yYmKsNqu\"CK(Kp5p", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) stringWriter0, "lY%C>;? gr?^u#", document_OutputSettings0, true, true, true);
      assertEquals("lY%C>;? gr?^u#", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Entities$EscapeMode", "org.jsoup.nodes.Entities$EscapeMode");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) mockPrintWriter0, " >K}[93qNh2RDQrs|-", document_OutputSettings0, true, true, true);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(36);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      Entities.escape((Appendable) bufferedWriter0, "M<", document_OutputSettings0, true, true, false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.escape((Appendable) stringBuffer0, "             ", document_OutputSettings0, false, true, false);
      assertEquals(" ", stringBuffer0.toString());
      assertEquals(" ", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = Entities.escape((String) null, (Document.OutputSettings) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = Entities.codepointsForName("&quot;", (int[]) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = Entities.getByName("pre");
      assertNotNull(string0);
      assertEquals("\u2AAF", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = Entities.getByName("&quot;");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = Entities.isBaseNamedEntity("1.a0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = Entities.isNamedEntity("dd");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Entities.isNamedEntity("o?8\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      String string0 = entities_EscapeMode0.nameForCodepoint(60);
      assertEquals("lt", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = entities_EscapeMode0.nameForCodepoint(62);
      assertEquals("gt", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      String string0 = entities_EscapeMode0.nameForCodepoint(124);
      assertEquals("verbar", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      String string0 = entities_EscapeMode0.nameForCodepoint(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = Entities.unescape("&gt;");
      assertEquals(">", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = Entities.escape("M<");
      assertEquals("M&lt;", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Character character0 = Entities.getCharacterByName("WH>jyG\"Tnbqey~");
      assertEquals('\uFFFF', (char)character0);
  }
}
