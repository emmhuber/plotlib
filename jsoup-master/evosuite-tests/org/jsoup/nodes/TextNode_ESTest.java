/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 22:24:33 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[4];
      charArray0[3] = ' ';
      stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((-981.4951F));
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("X^j04V5rJ5q*Z4;", "X^j04V5rJ5q*Z4;");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document document0 = Document.createShell("X^j04V5rJ5q*Z4;");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      textNode0.clearAttributes();
      MockFileWriter mockFileWriter0 = new MockFileWriter("X^j04V5rJ5q*Z4;");
      textNode0.outerHtmlHead(mockFileWriter0, 1, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("X^j04V5rJ5q*Z4;", "X^j04V5rJ5q*Z4;");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document document0 = Document.createShell("X^j04V5rJ5q*Z4;");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      TextNode textNode1 = textNode0.splitText(1);
      MockFileWriter mockFileWriter0 = new MockFileWriter("X^j04V5rJ5q*Z4;");
      textNode1.outerHtmlHead(mockFileWriter0, 1, document_OutputSettings1);
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("X^j04V5rJ5q*Z4;", "X^j04V5rJ5q*Z4;");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("X^j04V5rJ5q*Z4;");
      textNode0.outerHtmlHead(mockFileWriter0, 1, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("X^j04V5rJ5q*Z4;", "X^j04V5rJ5q*Z4;");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Document document0 = Document.createShell("X^j04V5rJ5q*Z4;");
      textNode0.parentNode = (Node) document0;
      MockFileWriter mockFileWriter0 = new MockFileWriter("X^j04V5rJ5q*Z4;");
      textNode0.outerHtmlHead(mockFileWriter0, 1, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("QU%3");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead((Appendable) null, 46, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must be not be negative", "#text");
      MockFile mockFile0 = new MockFile("Split offset must be not be negative", "#text");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(mockPrintWriter0, 0, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode("`8aBboN", "`8aBboN");
      Document document0 = Document.createShell("`8aBboN");
      textNode0.parentNode = (Node) document0;
      TextNode textNode1 = textNode0.splitText(1);
      assertEquals(1, textNode1.siblingIndex());
      assertEquals("#text", textNode1.nodeName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode("<", "<");
      // Undeclared exception!
      try { 
        textNode0.splitText(14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode("org.jsoup.select.StructuralEvaluator$Not", "org.jsoup.select.StructuralEvaluator$Not");
      // Undeclared exception!
      try { 
        textNode0.splitText((-1136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must be not be negative", "#text");
      TextNode textNode1 = textNode0.splitText(1);
      assertEquals("#text", textNode1.nodeName());
      assertNotSame(textNode1, textNode0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must be not be negative", "#text");
      MockFile mockFile0 = new MockFile("Split offset must be not be negative", "#text");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(mockPrintWriter0, 1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Split offset must be not be negative", "#text");
      String string0 = textNode0.text();
      assertEquals("Split offset must be not be negative", string0);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextNode textNode0 = new TextNode("", "");
      Document document0 = new Document("");
      textNode0.parentNode = (Node) document0;
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("", string0);
  }
}
