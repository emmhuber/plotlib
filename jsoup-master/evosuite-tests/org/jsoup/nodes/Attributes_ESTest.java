/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 22:35:37 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      boolean boolean0 = attributes1.equals(attributes0);
      assertTrue(boolean0);
      assertNotSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Iterator<Attribute> iterator0 = attributes0.iterator();
      boolean boolean0 = attributes0.equals(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("EpRctPY?GhFd}iv f", "~%");
      Attributes attributes2 = attributes1.clone();
      boolean boolean0 = attributes2.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("Fw7P/-y(OQP", true);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(53);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes0.html((Appendable) charArrayWriter0, document_OutputSettings0);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("@z", true);
      String string0 = attributes1.html();
      assertEquals(1, attributes0.size());
      assertEquals(" @z", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("EpRctPY?GhFd}iv f", "~%");
      attributes0.html();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", true);
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("EpRctPY?GhFd}iv f", "~%");
      List<Attribute> list0 = attributes1.asList();
      assertEquals(1, attributes0.size());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("V\"d LiY9jG/vLPT", "V\"d LiY9jG/vLPT");
      boolean boolean0 = attributes1.hasKeyIgnoreCase("V\"d LiY9jG/vLPT");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("{4I-/9*vj", (String) null);
      boolean boolean0 = attributes0.hasKey("{4I-/9*vj");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("V\"d LiY9jG/vLPT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", "");
      attributes0.put("IP&PL#B-fW", "^p=X9.=k4c1qT[]y");
      attributes0.remove("");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Fab", false);
      assertEquals(0, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("hN\"#UM", "");
      attributes0.normalize();
      attributes0.putIgnoreCase("hN\"#UM", "hN\"#UM");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("a*~qF_kq7cv)/_[u_1]", "a*~qF_kq7cv)/_[u_1]");
      attributes1.put("a*~qF_kq7cv)/_[u_1]", true);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("V\"d LiY9jG/vLPT");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("", "");
      attributes0.getIgnoreCase("");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("?s;9L$~[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = Attributes.checkNotNull((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("V\"d LiY9jG/vLPT", "V\"d LiY9jG/vLPT");
      attributes0.get("V\"d LiY9jG/vLPT");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("TY-u:coF#>", "TY-u:coF#>");
      assertEquals(1, attributes0.size());
      
      attributes0.removeIgnoreCase("TY-u:coF#>");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("KTP{9Ac?#(*qI", true);
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes", "Wyb");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.put("Wyb", "Wyb");
      String[] stringArray0 = new String[2];
      attributes3.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes3.addAll(attributes2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes0.putIgnoreCase("TY-u:coF#>", "TY-u:coF#>");
      boolean boolean0 = attributes1.equals(attributes0);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("IP&PL#B-fW", "^p=X9.=k4c1qT[]y");
      attributes0.addAll(attributes0);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      attributes0.put("IP&PL#B-fW", "^p=X9.=k4c1qT[]y");
      attributes1.putIgnoreCase("Sd89wE.JHxi|!gNZbn", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.toString();
      assertEquals("", string0);
  }
}
