/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 22:21:13 GMT 2024
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Document.createShell("noshade");
      Document document1 = document0.clone();
      document1.hasSameValue(document0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("3X\"K");
      cDataNode0.hasSameValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Document.createShell("pRscqny=GAX");
      document0.hasSameValue(document0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("$raF7R{dT");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("$raF7R{dT", "$raF7R{dT", false);
      document0.hasSameValue(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = new Document("abs:");
      Document document1 = document0.clone();
      document0.equals(document1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("'E`+;UjLx*V8");
      document0.appendChild(document0);
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = new Document("'E`+;UjLx*V8");
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Document.createShell("'E`+;UjLx*V8");
      document0.appendChild(document0);
      document0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("#text");
      document0.appendChild(document0);
      document0.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("M|0euUz+8JQv?W");
      document0.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode("[^-a-zA-Z0-9_:.]", "");
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        textNode0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("#");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.replaceChild(document1, document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Document.createShell("AfterBody");
      Element element0 = document0.body();
      element0.replaceWith(document0);
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Document.createShell("$raF7R{dT");
      // Undeclared exception!
      try { 
        document0.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Document.createShell("'c}#9=+GIU");
      Element element0 = document0.body();
      element0.unwrap();
      assertFalse(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("L:X6&OUk,woh;ny");
      Document document1 = new Document("L:X6&OUk,woh;ny");
      document1.prependChild(document0);
      Node node0 = document0.wrap("L:X6&OUk,woh;ny");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document("L:X6OUk,woh;W~6ny");
      // Undeclared exception!
      try { 
        document0.wrap("L:X6OUk,woh;W~6ny");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Document.createShell("@");
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = new Document("R[fF}tqcz*");
      document0.attr("R[fF}tqcz*", true);
      String string0 = document0.absUrl("R[fF}tqcz*");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("L:X6OUk,woh;W~6ny");
      document0.addClass("dV@9hp}}4");
      Node node0 = document0.clearAttributes();
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("M|0euUz+8JQv?W");
      document0.attr("", "abs:");
      // Undeclared exception!
      try { 
        document0.absUrl("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("M|0euUz+8JQv?W");
      String string0 = document0.absUrl("abs:");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      document0.getElementsByAttributeStarting("z_rZQFiZ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("abs:", "abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node$OuterHtmlVisitor");
      DocumentType documentType0 = new DocumentType("#text", "", "#text", "+oz", "");
      Element element0 = document0.doClone(documentType0);
      boolean boolean0 = element0.hasParent();
      assertTrue(boolean0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("3X\"K");
      String string0 = cDataNode0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Document.createShell("AfterBody");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      element0.after("AfterBody");
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode("*");
      textNode0.toString();
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("#");
      Node node0 = document0.removeAttr("");
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      // Undeclared exception!
      try { 
        document0.before(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", ".f^Hz_`Q~2e<", "");
      String string0 = documentType0.toString();
      assertEquals("<!DOCTYPE PUBLIC \".f^Hz_`Q~2e<\">", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DataNode dataNode0 = new DataNode("!Jm_?", "!Jm_?");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")Tu~-W*7i(7 ");
      // Undeclared exception!
      try { 
        dataNode0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("3X\"K");
      Node node0 = cDataNode0.shallowClone();
      assertNotNull(node0);
      assertEquals(0, node0.siblingIndex());
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendChild(document0);
      element0.unwrap();
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("`");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = document0.filter(nodeFilter0);
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Node$OuterHtmlVisitor", false);
      xmlDeclaration0.setBaseUri("CwJ-ndV2Ww}2zK'9U+#");
      assertFalse(xmlDeclaration0.hasParent());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
