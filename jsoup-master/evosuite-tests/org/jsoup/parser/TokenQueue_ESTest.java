/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 13 21:56:59 GMT 2024
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.TokenQueue;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenQueue_ESTest extends TokenQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.consumeAttributeKey();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeElementSelector();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      tokenQueue0.addFirst("-k=");
      tokenQueue0.consumeTagName();
      assertFalse(tokenQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      String string0 = tokenQueue0.consumeTagName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("YlL.4|+%>&U;H[D>p");
      tokenQueue0.consumeWord();
      assertEquals('', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("           ");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals("", tokenQueue0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = TokenQueue.unescape("l@/lCU-5oOr");
      assertEquals("l@/lCU-5oOr", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = TokenQueue.unescape("h\\eg");
      assertEquals("heg", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("queue not long enough to consume sequence.jsoup.parsequeueenqueue");
      tokenQueue0.chompBalanced('4', 'q');
      assertEquals('u', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("z7LU'MQ_q]`kydj/\"");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('z', 'z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '7LU'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("\"");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\"', '\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("59\"D$Fq~sFRxT");
      Character character0 = Character.valueOf('S');
      tokenQueue0.addFirst(character0);
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('S', '{');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at '59'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.addFirst("Did not find balanced marker at '");
      tokenQueue0.consumeCssIdentifier();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(' ', 'q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'not find balanced marker at 'Did not find balanced marker at ''
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("n'ra[){nm9%{l!k");
      tokenQueue0.consumeTagName();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'ra[){nm9%{l!k'
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("|");
      String[] stringArray0 = new String[0];
      tokenQueue0.consumeToAny(stringArray0);
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(";W G\"{#96gK");
      tokenQueue0.chompToIgnoreCase("SQbcN??yu");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.matchChomp("-");
      // Undeclared exception!
      try { 
        tokenQueue0.consume("-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Queue did not match expected sequence
         //
         verifyException("org.jsoup.parser.TokenQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("HD<");
      tokenQueue0.consume("");
      assertEquals("HD<", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dtYW^:`ViKZF/IB=:]");
      tokenQueue0.advance();
      assertEquals("tYW^:`ViKZF/IB=:]", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o'r69u>2hYR<GKa2bO-");
      tokenQueue0.chompToIgnoreCase("6e63;(4a");
      tokenQueue0.advance();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o'r69u>2hYR<GKa2bO-");
      tokenQueue0.chompToIgnoreCase("6e63;(4a");
      tokenQueue0.consumeWord();
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      boolean boolean0 = tokenQueue0.consumeWhitespace();
      assertEquals('D', tokenQueue0.peek());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<@Woq-64@ T {");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("<JKoq-64@ T>{");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      boolean boolean0 = tokenQueue0.matchesStartTag();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      tokenQueue0.consumeAttributeKey();
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced(' ', '%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced marker at 'not find balanced marker at '
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      String string0 = tokenQueue0.consumeToAny(stringArray0);
      assertFalse(tokenQueue0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("dtYW^:`ViKZF/IB=:]");
      tokenQueue0.consumeElementSelector();
      assertEquals('^', tokenQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.consumeCssIdentifier();
      char char0 = tokenQueue0.peek();
      assertEquals("", tokenQueue0.toString());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Did not find balanced marker at '");
      char char0 = tokenQueue0.peek();
      assertEquals('D', char0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("Shthc");
      tokenQueue0.chompTo("{h");
      char[] charArray0 = new char[1];
      boolean boolean0 = tokenQueue0.matchesAny(charArray0);
      assertEquals("", tokenQueue0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("o'r69u>2hYR<GKa2bO-");
      String string0 = tokenQueue0.toString();
      assertEquals("o'r69u>2hYR<GKa2bO-", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("-");
      tokenQueue0.chompToIgnoreCase("-");
      assertEquals("", tokenQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("");
      boolean boolean0 = tokenQueue0.matchesCS("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue("_");
      tokenQueue0.chompTo("");
      assertFalse(tokenQueue0.isEmpty());
  }
}
